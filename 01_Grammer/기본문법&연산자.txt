< 테이블, Table, TB >

 - DB내에서 실제 데이터를 관리, 저장하는 단위(객체) 
 - 표 형식을 가짐
 - 행(row), 열(column)로 이루어짐(행: 가로줄, 열: 세로줄)
 - 데이터는 행 단위로 처리한다  
 - 테이블은 소유자(owner)를 가지고 있다
	**Owner - 해당 객체를 생성한 사용자 계정

 - scott dept -> scott계정으로 생성한 dept 테이블

 - 소유자는 자신의 테이블에 대한 모든 권한을 가지고 있다

 - 테이블에 대한 관리 권한을 다른 계정에 부여하면 해당 계정도 테이블에 대한 관리가 가능하다

 - DBA계정(DataBase Administrator, 관리자 계정)은 권한에 상관없이, 소유자에 상관없이 모든 객체(테이블)를 관리할 수 있다

 	**오라클의 기본DBA계정 : SYS, SYSTEM


 <SQL, Structured Query Language >

 - 구조적 질의 언어
]
 - 데이터베이스의 자료에 대한 검색(조회), 관리, DB생성, DB수정, DBMS객체 관리 등을 수행할 수 있는 언어

 - 주로 CRUD작업을 한다 (Create, Read, Update, Delete)

 - 스크립트 언어 : 명령어 문장을 읽으면서 곧바로 동작하는 언어

 
 < SQL의 용도에 따른 분류 >

  1. DML(Data Manipulation Language)
	- 데이터 조작어
	- 테이블의 데이터를 조작(CRUD,조회, 삽입, 변경, 삭제)하는 명령어
	- 데이터를 처리할 때 사용하는 SQL
	- SELECT, INSERT, UPDATE, DELETE	

  2. DDL(Data Definition Language)
	- 데이터 정의어
	- 데이터베이스의 구조를 정의, 조작하는 SQL
	- CREATE, ALTER, DROP
	- 조회(Read)에 해당하는 구문은 없고 데이터 사전을 SELECT하여 만들어진(변경된)구조를 확인해야 한다

  	** 데이터 사전, 자료사전, Data Dictionary
	  데이터베이스의 정보를 기록해둔 특수한 테이블

	- 데이터베이스의 구조에 대한 정보를 기록한다
	- DDL이 수행될 때마다 DBMS가 알아서 알맞은 데이터 사전에 반영한다

	** 스키마, Schema : 데이터베이스의 구조
	
	** 메타 데이터, MetaData : 자료에 대한 특성을 설명하는 데이터(데이터에 대한 데이터)
		: 데이터에 대한 구조를 설명할 때 주로 사용되는 용어
  3. DCL(Data Control Language)
	- 데이터 제어어
	- 보안성, 데이터의 무결성, 병행작업, 수행 제어등을 정의하는 SQL
	- 데이터베이스 관리자가 DB를 관리하는 목적으로 사용한다

	- 권한 관련 명령어 - GRANT, REVOKE
	- 트랜잭션 관련 명령어 - COMMIT, ROLLBACK(DML과 관련있는 명령어)


--------------------------------------------------------------------------------------------------------------------

< SELECT 구문 -DML >

 - 테이블에 저장된 데이터를 조회할 때 사용하는 명령어
 - 반드시 FROM이 뒤에 따라 와야함
 
 -SELECT * FROM tablename;
	테이블의 모든 칼럼을 이용해 전체 데이터(행)을 조회한다

 -SELECT col1,col2... FROM tablename;
	지정된 컬럼만 조회한다

 -SELECT col1 AS alias1, col2 AS alias2 ... FROM tablename;
	지정된 컬럼에 별칭을 적용하여 조회

 -SELECT col1 alias1, col2 alias2,.... FROM tablename;
	AS키워드를 생략하고 띄어쓰기만 잘 구분하면 별칭이 된다

 < FROM 절 >
 - 조회대상을 지정하는 절
 --------조회대상----------
 - 테이블 Table
 - 뷰 View
 - 인라인 뷰 Inline View, 서브쿼리
 --------------------------
 
< WHERE 절 > 
 - 조건절 
 - 행을 조절한다(조건에 맞는 행만)
 - 조건에 만족하는 데이터(행)만 처리하도록 설정한다
 - SELECT , UPDATE, DELETE 구문에서 많이 사용딘다

 - WHERE [조건절]
	조건절 : 컬럼명 연산자 조건값의 형태로 작성한다
	ex) WHERE job = 'SALESMAN'
	ex) WHERE enmae = 'SMITH'
	ex) WHERE empno =7782

 < 연산자 >
 
 - 비교(관계)연산자
	
	=	같다
	!=	같지않다(<> , ^=  도 같은 뜻의 기호이다) 
	< 	작다
	>	크다
	<=	작거나같다
	>= 	크거나 같다

 - 논리연산자
	//키워드 자체가 연산자이다

	AND : 두조건이 모두 만족할때 참
	OR : 둘중 하나라도 만족하면 참
 	NOT : 논리 부정
 
 - 기타연산자

	BETWEEN a AND b 
		: a와 b사이의 데이터 (a,b포함)
		ex) deptno BETWEEN 10 AND 20
		ex) sal BETWEEN 1000 AND 3000 (( sal >=1000) AND (sla<=3000))와같음

		부정문 : NOT BETWEEN a AND b
			 WHERE NOT(emp a BETWEEN b)
	IN(list)
		: list에 해당하는 값 중 하나라도 일치한다면 TRUE( 있는 값만 출력)(없는건 출력X)
		ex) deptno IN(10,20)  =  (depno =10 OR dppno=20) --> 오른쪽은 항이늘어나면 답없음
		
		부정문 ) NOT IN(List);

	LIKE
		: 지정된 형식의 문자열 포맷(서식)으로 일치하는 조건

		%(퍼센트) : 여러개의 문자를 표현, 문자가 없는경우도 포함
		_(언더바) : 단일문자, 반드시 1글자가 존재해야 함
		
		ex) ename LIKE 'B%'; --B로 시작하는 모든 문자열(B하나라도 ㄱㅊ)
		    ename LIKE '%B%'; --B가 포함된 모든문자열
		    ename LIKE '_B%'; --두번째 문자가 B인 모든 문자열
		    ename LIKE '%B'; -- 끝이 B로 끝나는 모든 문자열
		
		부정문 : NOT LIKE

	IS NULL
		: 컬럼의 값이 NULL인지 검사하는 연산자
		ex) WHERE mgr IS NULL (mgr이 null인 행을 출력)
		ex) WHERE mgr=null ->이것은 실행안된다(조심)

		**테이블의 데이터 중 (null)값은 데이터가 없음을 나타낸다

		**WHERE mgr=null 형식으로 조건식을 사용하면 데이터가 존재하지 않는 공간과 null데이터를 비교하는 구문이 된다
		-> 데이터가 없는 공간은 아예 검색대상에서 제외된다
		
		부정문 : IS NOT NULL 
		


< DB 탐색 (조회) 방법, SCAN >

 - 풀 스캔,Full Scan
	: 테이블의 처음부터 끝까지 전부 탐색하는 방법

 - 인덱스 스캔, Index Scan
	: 인덱스를 우선 조회하고 인덱스에 참조되어져 있는 행을 찾아가는 탐색 방법 (속도가 빠르다)

** 인덱스 스캔으로 탐색되지 않으면 풀 스캔한다
 

< ORDER BY >
 - SELECT 쿼리 결과를 정렬하기 위한 구문
 - WHERE 절 다음에 (where)없어도됨
 - 오름차순 정렬(ASC)과 내림차순 정렬(DESC)이 있다
 - 오름차순 정렬이 기본이다
 
 	ASC,ASCENDING
	DESC,DESCENDING
	
<ORDER BY 구문형식 >
 ORDER BY 컬럼명1, 컬럼명2....(컬럼명 1로 우선정렬, 중복되면 컬럼2로 정렬 알고리즘으로 진행)
 **컬럼명 뒤에 ASC, DESC를 추가한다
 
  +NULL을 포함하는 컬럼의 정렬
  	-오름차순 정렬일 경우 NULL값들이 마지막에 나옴
	-내림차순 정렬일 경우 NULL값들이 처음에 나옴
	
	-NULL데이터가 정렬되는 순서를 바꾸려면 NULLS 키워드를 사용한다
	-NULLS FIRST :NULL값 처음으로 
	-NULLS LAST : 마지막으로
	ex) ORDER BY comm DESC NULLS LAST
	-DESC NULLS LAST를 많이 사용하는편
 
 < DISTINCT 키워드 >
 - 중복데이터를 제거하는 키워드
 - SELECT 키워드의 짝꿍
 - SELECT 키워드 바로 뒤에 붙여서 사용한다 (**컬럼에 붙는 함수가 아니다 ->SELECT DISTINCT가 함수이다)
 	ex) SELECT DISTINCT ~ 컬럼
	-컬럼 1,컬럼2가 뒤에오면 컬럼1,컬럼2가 모두 같아야 중복제거가된다 하나만 같으면 안됨
	

	
 	
	
 


