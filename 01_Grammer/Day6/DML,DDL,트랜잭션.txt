< INSERT - DML >
 - 테이블에 새로운 데이터를 추가할 때 사용한다

	- INSERT 구문 형식

		1--지정한 컬럼에 값을 삽입하는 구문(추천)

		INSERT INTO tablename (col1, col2, col3...)
		VALUES(data1, data2, data3.....);
		
		2--컬럼을 따로 지정하지 않고 사용
		--모든 컬럼의 값을 순서대로 입력해야함, 값의 순서 COLUMN_ID를 따른다(중간삽입 안된다)
		
		INSERT INTO tablename VALUESE(data1,data2,....);

		3--VALUES절 대신 SELECT 구문을 이용하여 조회된 값을 삽입
		INSERT INTO tablename (col1,col2,....) SELECT 절;
		INSERT INTO tablename SELECT 절;

< INSERT ALL- DML >
 
 - 한번에 여러 행을 삽입할 수 있게 해주는 DML 쿼리

 - SELECT 구문의 결과를 조건에 따라 INSERT 되도록 하는 구문

 - 여러개의 INSERT 구문으로 작성해야할 쿼리를 하나로 합칠 수 있다

 -  INSERT ALL 구문 형식
	
	INSERT ALL 
	WHEN 조건
		THEN INTO tablename (columns)
		VALUES(datalist)
 	[WHEN 절 여러 번 가능]
	SELECT 절; 
	** THEN INTO 절의 컬럼명, VALUES절 생략 가능함
	** 컬럼명, VALUES절 생략 시 SELECT 절에서 조회한 모든 데이터(모든 컬럼)에 해당하는 값을 삽입한다

	
< DELETE - DML >

 - 테이블의 행을 삭제할 때 사용하는 구문
 
 - DELETE 구문 형식
	DELETE FROM tablename  
	WHERE 조건;

	** FROM 키워드 생략가능
	** WHERE 절 없이 사용하면 테이블 전체 삭제 --(조심하기)

< UPDATE - DML >

 - 테이블의 데이터(행)을 수정하는 구문
 - 특정 행의 컬럼값을 변경할 수 있다

  + UPDATE 구문 형식

  	UPDATE tablename
	SET co1= 변경값1, col2 =변경값2....
	WHERE 조건;
 
	** WHERE절 없이 사용하면 모든 행이 변경된다**


< MERGE -DML >

 - 오라클 전용 문법
 - SELECT 수행 결과에 따라 UPDATE 또는 DELETE 또는 INSERT를 수행한다

 - SELECT 조회 결과가 존재하면 UPDATE 또는 DELETE 수행
 - SELECT 조회 결과가 존재하지 않으면 INSERT 수행

 + MERGE 구문 형식

	MERGE INTO tablename 
	USING ( 
	  SELECT 절 - 인라인 뷰(서브쿼리)
	 ) 
	 ON( 조건절 ) WHEN MATCHED THEN 구문
		      WHEN NOT MATCHED THEN 구문;
	
	-> INTO : 삽입,갱신,삭제가 이루어지는 테이블
	-> USING : 조건 비교할 소스테이블 또는 인라인 뷰(서브쿼리)
	-> ON 절 : WHEN절에서 반응하는 조건을 부여하는 절
	-> WHEN MATCHED
		ON절의 조건에 만족하는 USING절 테이블의 데이터가 존재하면 수행
		UPDATE, DELETE를 수행
	-> WHEN MATCHED
		ON절의 조건에 만족하는 USING절 테이블의 데이터가 없으면 수행
		INSERT 를 수행


< 트랜잭션, Transaction >

 - 데이터를 처리하는 일련의 작업 단위

 - 클라이언트마다 관리되는 데이터베이스에 작업한 내역들을 트랜잭션이라고 한다.

 - COMMIT, ROLLBACK에 의해서 작업한 내역들을 반영하거나, 되돌린다

 	+ 트랜잭션의 상태 변화-------

 		- 트랜잭션의 시작
		  INSERT, UPDATE, DELETE 코드를 수행했을 때
		  실행 가능한 DML 문장이 수행되었을 때부터 시작된다

		- 트랜잭션의 종료
		  COMMIT, ROLLBACK을 수행했을 때
		  DDL, DCL을 수행했을 때 --나중에 ROLLBACK해도 안먹힌다(시행하는순간 COMMIT되버림)

 **AUTO COMMIT (자동반영) 상황

	DDL, DCL 완료되는 시점
	SQL*Plus의 정상 종료 - exit명령 수행

 **AUTO RollBack(자동 미반영) 상황
	
	시스템의 비정상적 종료
	SQL*plus의 비정상 종료(윈도우 창 닫기 버튼 클릭)



< LOCK, 락 >

 - ROW LOCK( 행 단위 락)
 - TABLE LOCK(테이블 단위 락)
 - DB LOCK(데이터베이스 단위 락)

 - 특정사용자(클라이언트)에게만 해당 락 영역에 대한 접근을 허용하는 것

 - 트랜잭션 변경사항은 ROW LOCK이 발생한다

 - LOCK 영역에 접근하여 작업중인 클라이언트가 있으면 그 외 사용자는 LOCK영역의 데이터에 접근할 수 없다

  
-----------------------------------------------------------------------------------------------

< DDL, Data Definition Language, ,데이터 정의어 >
 
 - DB객체 (테이블, 사용자 계정, 뷰, 인덱스, 시퀀스 등등)을 생성, 변경, 삭제하는 SQL

 - 구문
	CREATE - 생성
	ALTER - 변경
	DROP - 삭제

< 테이블, TABLE >

 - 데이터베이스의 데이터를 저장하는 단위
 - 행(ROW, record), 열(column, col, 컬럼)으로 구성된 객체
 - 연관성 있는 데이터끼리 독립적인 테이블로 구성한다
 - 테이블끼리 관계를 맺어 연관성을 확보한다 (PK-FK)
 	** 관계 : Relation, Relationship
	** 개체 : Entity (Table)
	** ER,Entity - Relation
		개체-관계
		테이블들이 관계를 짓고 있는 것

 	** RDB , Relation DataBase, 관계형 데이터베이스
	  테이블들의 관계를 기반으로 이루어진 DB

< CREATE TABLE - 테이블 생성 >
 
 - 컬럼명은 해당 테이블 내에서 중복 불가
 - 컬럼은 반드시 자료형이 명시되어야 함

	+기본
 	CREATE TABLE tablename (
	컬럼명1, 자료형1,
	컬럼명2, 자료형2,
	컬럼명3, 자료형3,
	...

	);

	--------------------------
	CREATE TABLE tablename AS SELCET 구문 ; --> 복사본 만들기


< NUMBER 자료형 > 22byte고정

 - 숫자 타입
 - 정수, 실수 모두 표현
 - 음수,0,양수 표현가능
 - 가변 길이 타입
 
 	< 사용법 >

	 - NUMBER : 최대 38자리까지 저장가능한 타입( 정수, 실수 모두 가능 )

 	- NUMBER(w) : 최대 w자리까지 정수만 저장가능한 타입

	 - NUMBER(w,d) : 전체 w자리가능, 소수점자리 이하 d자리수까지 지정자리 확보

		ex) NUMBER(7,3) 정수부 4자리, 소수점 3자리 -->1234,567
	  	  NUMBER(4,0) --> 1234
  	  	  NUMBER(3,5) 전체숫자는 3개가능, 소수점이하 5째자리 확보 0.00XXX ->숫자는 3개들어간다, 뒤에서부터 나머지는 0고정



< VARCHAR2(n) 자료형 >

 - 최대 n길이까지 문자를 저장할 수 있다
 - 가변 길이 문자 데이터 
 - 실제 저장되는 데이터의 크기만큼만 저장공간을 사용한다 --1000을 선언해도 넣은만큼만 사용
 - 최소크기가 1이다.
 - 최대 저장 길이는 n으로 표현한다, **반드시 명시해야한다
 - 최대 저장 크기 제한은 4000이다
 
 ** 한글 인코딩(Character set)을 UTF-8(AL32UTF8)을 사용하면 한글 한 글자당 3바이트가 필요하다
 ** VARCHAR2 는 글자의 바이트 수만큼 길이를 파악하는 것이 기본이다 
 ** VARCHAR2 의 길이 지정자 n뒤에 BYTE, CHAR접미어 사용 가능
	BYTE - 바이트 단위로 길이를 지정한다(기본값, 생략가능)

	CHAR - 문자 길이로 지정한다
	ex) VARCHAR2(30 CHAR)
		->영어,한글,숫자 상관없이 30글자 표현 가능
 
< CHAR(n) -자료형 >
 - 고정 길이 문자 데이터
 - n으로 지정한 크기만큼 저장 공간을 확보한다
 - 최소크기 1
 - CHAR 라고만 자료형을 적용하면 자동으로 크기가 1이 된다
	** VARCHAR2 --사용불가, (n)크기 지정 필수
	** CHAR --사용가능, 자동으로 n이 1로 지정됨

 - 최대 2000까지만 가능
 ** VARCHAR2와 CHAR는 문자 표현하는 방식이 같다
 ** 둘 다 같은 문자로 인식한다
 ** 하지만 저장공간을 다루는 방식이 달라 표현에 신경을 써야한다
 ** 데이터를 활용할 때 trim() 함수를 사용하는 것이 좋다
 ** CHAR타입은 데이터가 자료형의 크기보다 작으면 남는 공간을 공백(' ')으로 RPAD(Right padding)한다









